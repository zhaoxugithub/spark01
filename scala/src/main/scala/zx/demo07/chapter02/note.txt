1)Scala 与 Java有着相似的数据类型

1)在Scala中数据类型都是对象，也就是说scala没有java中的原生类型(int, long, flout , double 等)

2)Scala数据类型分为两大类 AnyVal(值类型) 和 AnyRef(引用类型)，
    请查看 "数据类型.png"

对 数据类型的关系图的说明
    1)Any是所有类的根类型,即所有类的父类(基类, 参考java的Object)
    2)两个大的类型分支
        AnyVal :值类型，即可以理解成就是java的基本数据类型
        AnyRef :引用类型
    3)AnyVal:值类型, 请注意:是类(对象)
    4)在scala中有两个特别的类型
        Null类型: 是AnyRef的子类, 只有一个实例:null;他是bottom class;
        Nothing类型: 是所有类的子类，他是bottom class ,
            它的价值是在于, 可以将Nothing类型的对象返回给任意的变量或者方法，
            在抛出异常时, 使用较多(后面演示)
    7)在scala中遵守 低精度的数据 自动的转成 高精度的数据类型。(即隐式转换)
    8)在scala中，Unit 类型比较特殊，这个类型也只有一个实例:一个小括号 ()

特点
相对于java的类型系统，scala要复杂些！也正是这复杂多变的类型系统, 才让面向对象编程和函数式编程完美的融合在了一起



变量
1.概念
通过门牌号我们可以找到房间，而通过变量名可以访问到变量(值)。

2.使用
2.1 声明变量的语法
var / val 变量名 [: 变量类型] = 变量值

1)声明变量时，类型可以省略（就是叫 类型推断）
2) scala要求变量声明时必须赋值, 即初始化
2)类型确定后，就不能修改，说明Scala 是强数据类型语言.
3)在声明/定义一个变量时，可以使用var 或者 val 来修饰，
    var 修饰的变量可改变，
    val 修饰的变量不可改.
    (推荐使用val, 线程安全，使用效率高)


  * Unit类型、Null类型和Nothing类型
  *
  * 1)Null类只有一个实例:null。
  *     null可以赋值给任意引用类型(AnyRef)
  *     但是不能赋值给值类型(AnyVal)
  *
  * 2)Unit类型用来标识 "过程"，(过程, 就是没有明确返回值的函数。)
  *     由此可见，Unit类似于Java里的void。
  *     Unit只有一个实例: ()，这个实例也没有实质的意义
  *
  * 3)Nothing，可以作为没有正常返回值的方法的返回类型，
  *   非常直观的告诉你这个方法不会正常返回，
  *   而且由于Nothing是其他任意类型的子类，他还能跟要求返回值的方法兼容